// import { WebSocket } from "ws";
// import { validateMessage, chatPayloadSchema } from "../middleware/validation";
// import { processChatMessage, getChatHistory, isSpamming } from "../../game/engine/chatEngine";
// import { broadcast } from "../socketHandler";
// import { log } from "../../utils/logger";
// import { handleError } from "../../utils/errorHandler";
// import { registerHandler } from "../messageDispatcher";
// import { sendSuccess, sendError, sendSystemError, sendMessage } from "../../utils/websocketUtils";

// // –ü—Ä–æ—Å—Ç–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
// function escapeHtml(text: string): string {
//   return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
// }

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
// function handleSendMessage(ws: WebSocket, data: any): void {
//   try {
//     // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ WebSocket
//     const playerData = (ws as any).playerData;
//     if (!playerData || !playerData.id) {
//       sendError(ws, "chat/send", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è");
//       return;
//     }

//     // –ó–∞–ø–æ–ª–Ω—è–µ–º senderId –∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//     const messageData = { ...data, senderId: playerData.id };

//     const validation = validateMessage(chatPayloadSchema, messageData);
//     if (!validation.success) {
//       sendError(ws, "chat/send", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", { details: validation.errors });
//       return;
//     }

//     const { senderId, message: chatText } = validation.data;

//     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
//     if (isSpamming(senderId)) {
//       sendError(ws, "chat/send", "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
//       return;
//     }

//     // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
//     const sanitizedText = escapeHtml(chatText);

//     // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
//     const chatMsg = processChatMessage(senderId, sanitizedText);

//     if (!chatMsg) {
//       sendError(ws, "chat/send", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
//       return;
//     }

//     // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
//     log(`–ß–∞—Ç: ${playerData.username}: ${chatText}`);

//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
//     broadcast({
//       action: "chat/newMessage",
//       data: {
//         message: {
//           ...chatMsg,
//           username: playerData.username, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//         },
//       },
//     });

//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
//     sendSuccess(ws, "chat/send", {
//       messageId: chatMsg.timestamp, // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
//     });
//   } catch (error) {
//     handleError(error as Error, "ChatHandlers.sendMessage");
//     sendSystemError(ws, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
//   }
// }

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
// function handleGetHistory(ws: WebSocket, data: any): void {
//   try {
//     const limit = data.limit || 50;
//     const before = data.before || undefined;

//     const history = getChatHistory(limit, before);

//     sendMessage(ws, "chat/history", {
//       messages: history,
//     });
//   } catch (error) {
//     handleError(error as Error, "ChatHandlers.getHistory");
//     sendSystemError(ws, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞");
//   }
// }

// // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
// export function registerChatHandlers(): void {
//   registerHandler("chat", "sendMessage", handleSendMessage);
//   registerHandler("chat", "getHistory", handleGetHistory);
// }

import { WebSocket } from "ws";
import { processChatMessage, getChatHistory } from "../../game/engine/chatEngine";
import { broadcast } from "../socketHandler";
import { log } from "../../utils/logger";
import { handleError } from "../../utils/errorHandler";
import { registerHandler } from "../messageDispatcher";
import { sendSuccess, sendError, sendSystemError, sendMessage } from "../../utils/websocketUtils";

// –ü—Ä–æ—Å—Ç–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
function escapeHtml(text: string): string {
  return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function handleSendMessage(ws: WebSocket, data: any): void {
  try {
    // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∏–º—è
    const username = data.username || "–ê–Ω–æ–Ω–∏–º";
    const chatText = data.message || "";

    if (!chatText.trim()) {
      sendError(ws, "chat/send", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –≥–æ—Å—Ç—è
    const tempId = `guest-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
    const sanitizedText = escapeHtml(chatText);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const chatMsg = processChatMessage(tempId, sanitizedText);
    console.log("üöÄ ~ handleSendMessage ~ chatMsg:", chatMsg);

    if (!chatMsg) {
      sendError(ws, "chat/send", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      return;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    log(`–ß–∞—Ç: ${username}: ${chatText}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    broadcast({
      action: "chat/newMessage",
      data: {
        message: {
          ...chatMsg,
          username: username,
        },
      },
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    sendSuccess(ws, "chat/send", {
      messageId: chatMsg.timestamp,
    });
  } catch (error) {
    handleError(error as Error, "ChatHandlers.sendMessage");
    sendSystemError(ws, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
function handleGetHistory(ws: WebSocket, data: any): void {
  try {
    const limit = data.limit || 50;
    const before = data.before || undefined;

    const history = getChatHistory(limit, before);

    sendMessage(ws, "chat/history", {
      messages: history,
    });
  } catch (error) {
    handleError(error as Error, "ChatHandlers.getHistory");
    sendSystemError(ws, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞");
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
export function registerChatHandlers(): void {
  registerHandler("chat", "sendMessage", handleSendMessage);
  registerHandler("chat", "getHistory", handleGetHistory);
}
