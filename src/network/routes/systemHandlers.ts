// src/network/routes/systemHandlers.ts
import { WebSocket } from "ws";
import { registerHandler } from "../messageDispatcher";
import { sendMessage } from "../../utils/websocketUtils";
import { clients } from "../socketHandler";
import { log } from "../../utils/logger";
import { generateMap } from "../../utils/mapGenerator";

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏–Ω–≥–∞
function handlePing(ws: WebSocket, data: any): void {
  sendMessage(ws, "system/pong", { timestamp: Date.now() });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–Ω–≥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–Ω–≥–∞)
function handlePong(ws: WebSocket, data: any): void {
  // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const clientInfo = clients.find((client) => client.ws === ws);

  if (clientInfo) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    clientInfo.lastActivity = Date.now();
    log(`Pong –ø–æ–ª—É—á–µ–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${clientInfo.username || clientInfo.id || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}`);
  }
}

function handleMap(ws: WebSocket, data: any): void {
  const map = generateMap();
  console.log("üöÄ ~ handleMap ~ map:", JSON.parse(JSON.stringify(map.map)));
  console.log(map.stats);
}
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export function registerSystemHandlers(): void {
  registerHandler("system", "ping", handlePing);
  registerHandler("system", "pong", handlePong);
  registerHandler("system", "map", handleMap);
}
