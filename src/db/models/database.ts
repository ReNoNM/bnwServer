/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface ChatMessages {
  id: Generated<string>;
  message: string;
  metadata: Generated<Json | null>;
  receiver_id: string | null;
  sender_id: string;
  timestamp: Int8;
  type: string;
}

export interface Players {
  created_at: Generated<Timestamp | null>;
  email: string;
  id: Generated<string>;
  last_login: Timestamp | null;
  password: string;
  settings: Generated<Json | null>;
  status: Generated<string | null>;
  username: string;
}

export interface DB {
  chat_messages: ChatMessages;
  players: Players;
}
